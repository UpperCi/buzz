namespace math;

import "errors";

/// @return absolute value of n
extern fun abs(n: float) > float;

/// @return acos of n
extern fun acos(n: float) > float;

/// @return asin of n
extern fun asin(n: float) > float;

/// @return atan of n
extern fun atan(n: float) > float;

/// @return ceiled n
extern fun bzceil(n: float) > int;

/// @return cos of n
extern fun bzcos(n: float) > float;

/// Ï€ constant
const pi: float = 3.1415926535898;

/// Convert radian to degree
fun deg(n: float) > float {
    return n * 180.0 / pi;
}

/// @return exp of n
extern fun bzexp(n: float) > float;

/// @returned floored n
extern fun bzfloor(n: float) > int;

/// @return log(base) of n
extern fun bzlog(base: float, n: float) > float;

/// @return max of a and b
extern fun maxFloat(a: float, b: float) > float;

/// @return min of a and b
extern fun minFloat(a: float, b: float) > float;

/// @return max of a and b
extern fun maxInt(a: int, b: int) > int;

/// @return min of a and b
extern fun minInt(a: int, b: int) > int;

/// Convert degree to radian
fun rad(n: float) > float {
    return n * pi / 180.0;
}

/// @return sin of n
extern fun bzsin(n: float) > float;

/// @return square root of n
extern fun bzsqrt(n: float) > float;

/// @return tan of n
extern fun bztan(n: float) > float;

/// @return `x`^`y`
extern fun pow(x: float, y: float) > float !> errors\OverflowError, errors\UnderflowError;

export abs;
export acos;
export asin;
export atan;
export bzsqrt as sqrt;
export bzceil as ceil;
export bzcos as cos;
export deg;
export bzexp as exp;
export bzfloor as floor;
export bzlog as log;
export minFloat;
export maxFloat;
export minInt;
export maxInt;
export pi;
export rad;
export bzsin as sin;
export bztan as tan;
export pow;
