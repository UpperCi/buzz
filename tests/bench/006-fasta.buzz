import "std";
import "math";
import "buffer" as _;

final double IM = 139968.0;
final double IA = 3877.0;
final double IC = 29573.0;
final int lineLength = 60;
final int bufferSize = (lineLength + 1) * 1024;

fun makeRepeatFasta(str id, str desc, str s, int nchars) > void {
    std\print(">{id} {desc}");
    int p = 0;
    int sn = s.len();
    str s2 = s + s;
    for (int i = lineLength; i < nchars; i = i + lineLength) {
        std\print(s2.sub(p, len: lineLength - 1));
        p = p + lineLength;
        if (p > sn) {
            p = p - sn;
        }
    }
    int tail = nchars % lineLength;
    if (tail > 0) {
        std\print(s2.sub(p, len: tail - 1));
    }
}

object Frequency {
    Buffer chars,
    [double] probs,
    double last,

    static fun init(Buffer chars, [double] probs, double last) > Frequency {
        Frequency freq = Frequency{
            chars = chars,
            probs = probs,
            last = last,
        };

        freq.makeCumulative();

        return freq;
    }

    fun random(double max) > double {
        this.last = (this.last * IA + IC) % IM;
        return max * this.last * (1.0 / IM);
    }

    fun makeCumulative() > void {
        double cp = 0.0;
        foreach (int i, double prob in this.probs) {
            cp = cp + prob;
            this.probs[i] = cp;
        }
    }

    fun selectRandomIntoBuffer(Buffer buffer, int initialBufferIndex, int nRandom) > int !> OutOfBoundError, WriteWhileReadingError {
        final int len = this.probs.len();
        var bufferIndex = initialBufferIndex;

        for (int rIndex = 0; rIndex < nRandom; rIndex = rIndex + 1) {
            double r = this.random(1.0);
            bool skip = false;
            for (int i = 0; i < len; i = i + 1) {
                if (r < this.probs[i]) {
                    buffer\setAt(bufferIndex, value: this.chars.at(i));
                    bufferIndex = bufferIndex + 1;
                    skip = true;
                    break;
                }
            }

            if (!skip) {
                buffer\setAt(bufferIndex, value: this.chars.at(len - 1));
                bufferIndex = bufferIndex + 1;
            }
        }

        return bufferIndex;
    }
}

fun makeRandomFasta(str id, str desc, Frequency fpf, int initialNchars) > void !> OutOfBoundError, WriteWhileReadingError {
    std\print(">{id} {desc}");
    var nchars = initialNchars;

    Buffer buffer = Buffer.init(bufferSize);
    int bufferIndex = 0;
    while (nchars > 0) {
        int chunkSize = std\toInt(math\minDouble(a: std\toDouble(lineLength), b: std\toDouble(nchars)));

        if (bufferIndex == bufferSize) {
            std\print(buffer\toString().sub(0, len: bufferIndex));
            buffer = Buffer.init(bufferSize);
            bufferIndex = 0;
        }

        bufferIndex = fpf.selectRandomIntoBuffer(buffer, initialBufferIndex: bufferIndex, nRandom: chunkSize);
        buffer\setAt(bufferIndex, value: 10);
        bufferIndex = bufferIndex + 1;

        nchars = nchars - chunkSize;
    }

    std\print(buffer\toString().sub(0, len: bufferIndex));
}

final str alu = "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG"
    + "GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA"
    + "CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT"
    + "ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA"
    + "GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG"
    + "AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC"
    + "AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA";

fun main([str] args) > void !> any {
    int N = 1000;
    if (args.len() > 0) {
        N = std\parseInt(args[0]) ?? 1000;
    }

    makeRepeatFasta("ONE", desc: "Homo sapiens alu", s: alu, nchars: N * 2);

    Buffer iubChars = Buffer.init();
    iubChars.write("acgtBDHKMNRSVWY");
    final Frequency iub = Frequency.init(
        chars: iubChars,
        probs: [ 0.27, 0.12, 0.12, 0.27, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02 ],
        last: 42.0,
    );

    makeRandomFasta("TWO", desc: "IUB ambiguity codes", fpf: iub, initialNchars: N * 3);

    Buffer homoSapiensChars = Buffer.init();
    homoSapiensChars.write("acgt");
    final Frequency homoSapiens = Frequency.init(
        chars: homoSapiensChars,
        probs: [ 0.3029549426680, 0.1979883004921, 0.1975473066391, 0.3015094502008 ],
        last: iub.last,
    );

    makeRandomFasta("THREE", desc: "Homo sapiens frequency", fpf: homoSapiens, initialNchars: N * 5);
}