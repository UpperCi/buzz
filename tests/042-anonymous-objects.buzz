import "std";

fun getInfo() > obj{ name: str, age: int } {
    return .{
        name = "Joe",
        age = 36,
    };
}

test "Anonymous objects" {
    const info = getInfo();
    // Two anonymous type matches
    _: obj{ name: str, age: int } = info;

    std\assert(info.name == "Joe" and info.age == 36, message: "Could declare, instanciate and acces anonymous objects");
    std\assert(info is obj{ name: str, age: int },  message: "Type safety works with anonymous object");
}

test "Named variable init" {
    const name = "Joe";
    const age = 42;

    const person = .{ name, age };

    std\assert(person.name == "Joe" and person.age == 42);
}

fun getPayload::<T>(data: T) > obj{ data: T } {
    return .{
        data = data
    };
}

test "Anonymous object with generics" {
    const payload = getPayload::<int>(42);

    std\assert(payload.data == 42, message: "Could use anonymous object with generic");
}
